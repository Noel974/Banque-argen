openapi: 3.0.3
info:
  title: Argent Bank
  description: |
    Remede Agency, une agence spécialisée dans le développement d'applications web.
    Un nouveau projet qui concerne une nouvelle banque qui démarre, Argent Bank, qui essaie de percer dans le secteur et qui a besoin d'aide pour mettre en place son application.

    Phase 2 : Transactions nous sommes encore en phase de conception. De notre côté, nous mettons au point une fonctionnalité pour les transactions qui doit pouvoir permettre aux utilisateurs :

    - La méthode HTTP (ex. : GET, POST, PUT, DELETE.)
  contact:
    email: noelantoine974@outlook.fr
  license:
    name: Licence Noel Emmanuel
  version: 1.0.11
servers:
  - url: https://localhost:3001/api/v1

paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      requestBody:
        description: Login Payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Login Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error

  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      requestBody:
        description: Signup Payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Signup Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error

  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          schema:
            type: string
      requestBody:
        description: Update user profile attributes
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error

  /Accound:
    get:
      security:
        - Bearer: []
      tags:
        - Accound
      summary: Récupérer les Accound du mois en cours
      description: |
        Récupère toutes les accounds en cours, groupées par compte.
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transactions récupérées avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Accound-user'
        '400':
          description: Erreur du système
        '404':
          description: Aucune accound trouvée en cours

  /transactionId/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - transactionId
      summary: Récupérer les détails d'une transaction
      description: Récupère les détails d'une transaction spécifique.
      parameters:
        - in: path
          name: transactionId
          schema:
            type: string
          description: Attach transaction ID to URL
          required: true
      responses:
        '200':
          description: Détails de la transaction récupérés avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction-id'
        '404':
          description: La transaction spécifiée n'a pas été trouvée
    post:
      security:
        - Bearer: []
      tags:
        - transactionId
      summary: Créer une nouvelle transaction
      description: Crée une nouvelle transaction avec les détails fournis.
      parameters:
        - in: path
          name: transactionId
          schema:
            type: string
          description: Creer transaction Id
          required: true
      requestBody:
        description: Les détails de la nouvelle transaction
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction-id'
      responses:
        '201':
          description: Transaction créée avec succès
        '400':
          description: Données de la transaction invalides
        '500':
          description: Erreur interne du serveur
    put:
      security:
        - Bearer: []
      tags:
        - transactionId
      summary: Modifier une transaction
      description: Modifier une transaction avec les détails fournis.
      parameters:
        - in: path
          name: transactionId
          schema:
            type: string
          description: Attach transaction ID to URL
          required: true
      requestBody:
        description: Les détails de la transaction à modifier
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction-put'
      responses:
        '200':
          description: Transaction modifiée avec succès
        '400':
          description: Données de la transaction invalides
    delete:
      security:
        - Bearer: []
      tags:
        - transactionId
      summary: Supprimer une transaction
      description: Supprime une transaction spécifique.
      parameters:
        - in: path
          name: transactionId
          schema:
            type: string
          description: Attach transaction ID to URL
          required: true
      responses:
        '204':
          description: Transaction supprimée avec succès
        '404':
          description: La transaction spécifiée n'a pas été trouvée

components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          description: user email
        password:
          type: string
          description: user password
        firstName:
          type: string
          description: user first name
        lastName:
          type: string
          description: user last name
    Login:
      type: object
      properties:
        email:
          type: string
          description: user email
        password:
          type: string
          description: user password
    ApiResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        body:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
    UserProfile:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
    Transaction-id:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        amount:
          type: string
        balance:
          type: string
        category:
          type: string
        notes:
          type: string
    Transaction-put:
      type: object
      properties:
        category:
          type: string
        notes:
          type: string
    Accound-user:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        contenu:
          type: string
        date:
          type: string
        total:
          type: string

  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
